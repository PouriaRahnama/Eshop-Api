<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swashbuckle.AspNetCore.SwaggerUI</name>
    </assembly>
    <members>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIBuilderExtensions.UseSwaggerUI(Microsoft.AspNetCore.Builder.IApplicationBuilder,Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Register the SwaggerUI middleware with provided options
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIBuilderExtensions.UseSwaggerUI(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            Register the SwaggerUI middleware with optional setup action for DI-injected options
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.InjectStylesheet(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String,System.String)">
            <summary>
            Injects additional CSS stylesheets into the index.html page
            </summary>
            <param name="options"></param>
            <param name="path">A path to the stylesheet - i.e. the link "href" attribute</param>
            <param name="media">The target media - i.e. the link "media" attribute</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.InjectJavascript(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String,System.String)">
            <summary>
            Injects additional Javascript files into the index.html page
            </summary>
            <param name="options"></param>
            <param name="path">A path to the javascript - i.e. the script "src" attribute</param>
            <param name="type">The script type - i.e. the script "type" attribute</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.SwaggerEndpoint(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String,System.String)">
            <summary>
            Adds Swagger JSON endpoints. Can be fully-qualified or relative to the UI page
            </summary>
            <param name="options"></param>
            <param name="url">Can be fully qualified or relative to the current host</param>
            <param name="name">The description that appears in the document selector drop-down</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.EnableDeepLinking(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Enables deep linking for tags and operations
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.EnablePersistAuthorization(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Enables persist authorization data
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.DisplayOperationId(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Controls the display of operationId in operations list
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.DefaultModelsExpandDepth(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.Int32)">
            <summary>
            The default expansion depth for models (set to -1 completely hide the models)
            </summary>
            <param name="options"></param>
            <param name="depth"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.DefaultModelExpandDepth(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.Int32)">
            <summary>
            The default expansion depth for the model on the model-example section
            </summary>
            <param name="options"></param>
            <param name="depth"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.DefaultModelRendering(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,Swashbuckle.AspNetCore.SwaggerUI.ModelRendering)">
            <summary>
            Controls how the model is shown when the API is first rendered.
            (The user can always switch the rendering for a given model by clicking the 'Model' and 'Example Value' links.)
            </summary>
            <param name="options"></param>
            <param name="modelRendering"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.DisplayRequestDuration(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Controls the display of the request duration (in milliseconds) for Try-It-Out requests
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.DocExpansion(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,Swashbuckle.AspNetCore.SwaggerUI.DocExpansion)">
            <summary>
            Controls the default expansion setting for the operations and tags.
            It can be 'List' (expands only the tags), 'Full' (expands the tags and operations) or 'None' (expands nothing)
            </summary>
            <param name="options"></param>
            <param name="docExpansion"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.EnableFilter(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Enables filtering. The top bar will show an edit box that you can use to filter the tagged operations that are shown.
            If an expression is provided it will be used and applied initially.
            Filtering is case sensitive matching the filter expression anywhere inside the tag
            </summary>
            <param name="options"></param>
            <param name="expression"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.EnableTryItOutByDefault(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Enables the "Try it out" section by default.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.MaxDisplayedTags(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.Int32)">
            <summary>
            Limits the number of tagged operations displayed to at most this many. The default is to show all operations
            </summary>
            <param name="options"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.ShowExtensions(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Controls the display of vendor extension (x-) fields and values for Operations, Parameters, and Schema
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.ShowCommonExtensions(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Controls the display of extensions (pattern, maxLength, minLength, maximum, minimum) fields and values for Parameters
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.SupportedSubmitMethods(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,Swashbuckle.AspNetCore.SwaggerUI.SubmitMethod[])">
            <summary>
            List of HTTP methods that have the Try it out feature enabled. An empty array disables Try it out for all operations.
            This does not filter the operations from the display
            </summary>
            <param name="options"></param>
            <param name="submitMethods"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuth2RedirectUrl(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            OAuth redirect URL
            </summary>
            <param name="options"></param>
            <param name="url"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.EnableValidator(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            You can use this parameter to enable the swagger-ui's built-in validator (badge) functionality
            Setting it to null will disable validation 
            </summary>
            <param name="options"></param>
            <param name="url"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthClientId(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Default clientId
            </summary>
            <param name="options"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthUsername(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Default userName
            </summary>
            <param name="options"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthClientSecret(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Default clientSecret
            </summary>
            <param name="options"></param>
            <param name="value"></param>
            <remarks>Setting this exposes the client secrets in inline javascript in the swagger-ui generated html.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthRealm(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            realm query parameter (for oauth1) added to authorizationUrl and tokenUrl
            </summary>
            <param name="options"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthAppName(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Application name, displayed in authorization popup
            </summary>
            <param name="options"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthScopeSeparator(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Scope separator for passing scopes, encoded before calling, default value is a space (encoded value %20)
            </summary>
            <param name="options"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthScopes(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String[])">
            <summary>
            String array of initially selected oauth scopes, default is empty array
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthAdditionalQueryStringParams(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Additional query parameters added to authorizationUrl and tokenUrl
            </summary>
            <param name="options"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthUseBasicAuthenticationWithAccessCodeGrant(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Only activated for the accessCode flow. During the authorization_code request to the tokenUrl,
            pass the Client Password using the HTTP Basic Authentication scheme (Authorization header with
            Basic base64encoded[client_id:client_secret]). The default is false
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.OAuthUsePkce(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Only applies to authorizatonCode flows. Proof Key for Code Exchange brings enhanced security for OAuth public clients.
            The default is false
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.UseRequestInterceptor(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Function to intercept remote definition, "Try it out", and OAuth 2.0 requests.
            </summary>
            <param name="options"></param>
            <param name="value">MUST be a valid Javascript function: (request: SwaggerRequest) => SwaggerRequest</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SwaggerUIOptionsExtensions.UseResponseInterceptor(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Function to intercept remote definition, "Try it out", and OAuth 2.0 responses.
            </summary>
            <param name="options"></param>
            <param name="value">MUST be a valid Javascript function: (response: SwaggerResponse ) => SwaggerResponse </param>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions.RoutePrefix">
            <summary>
            Gets or sets a route prefix for accessing the swagger-ui
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions.IndexStream">
            <summary>
            Gets or sets a Stream function for retrieving the swagger-ui page
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions.DocumentTitle">
            <summary>
            Gets or sets a title for the swagger-ui page
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions.HeadContent">
            <summary>
            Gets or sets additional content to place in the head of the swagger-ui page
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions.ConfigObject">
            <summary>
            Gets the JavaScript config object, represented as JSON, that will be passed to the SwaggerUI
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions.OAuthConfigObject">
            <summary>
            Gets the JavaScript config object, represented as JSON, that will be passed to the initOAuth method
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions.Interceptors">
            <summary>
            Gets the interceptor functions that define client-side request/response interceptors
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.Urls">
            <summary>
            One or more Swagger JSON endpoints (url and name) to power the UI
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.DeepLinking">
            <summary>
            If set to true, enables deep linking for tags and operations
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.PersistAuthorization">
            <summary>
            If set to true, it persists authorization data and it would not be lost on browser close/refresh
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.DisplayOperationId">
            <summary>
            Controls the display of operationId in operations list
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.DefaultModelsExpandDepth">
            <summary>
            The default expansion depth for models (set to -1 completely hide the models)
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.DefaultModelExpandDepth">
            <summary>
            The default expansion depth for the model on the model-example section
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.DefaultModelRendering">
            <summary>
            Controls how the model is shown when the API is first rendered.
            (The user can always switch the rendering for a given model by clicking the 'Model' and 'Example Value' links)
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.DisplayRequestDuration">
            <summary>
            Controls the display of the request duration (in milliseconds) for Try-It-Out requests
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.DocExpansion">
            <summary>
            Controls the default expansion setting for the operations and tags.
            It can be 'list' (expands only the tags), 'full' (expands the tags and operations) or 'none' (expands nothing)
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.Filter">
            <summary>
            If set, enables filtering. The top bar will show an edit box that you can use to filter the tagged operations
            that are shown. Can be an empty string or specific value, in which case filtering will be enabled using that
            value as the filter expression. Filtering is case sensitive matching the filter expression anywhere inside the tag
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.MaxDisplayedTags">
            <summary>
            If set, limits the number of tagged operations displayed to at most this many. The default is to show all operations
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.ShowExtensions">
            <summary>
            Controls the display of vendor extension (x-) fields and values for Operations, Parameters, and Schema
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.ShowCommonExtensions">
            <summary>
            Controls the display of extensions (pattern, maxLength, minLength, maximum, minimum) fields and values for Parameters
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.OAuth2RedirectUrl">
            <summary>
            OAuth redirect URL
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.SupportedSubmitMethods">
            <summary>
            List of HTTP methods that have the Try it out feature enabled.
            An empty array disables Try it out for all operations. This does not filter the operations from the display
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.TryItOutEnabled">
            <summary>
            Controls whether the "Try it out" section should be enabled by default.
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.ConfigObject.ValidatorUrl">
            <summary>
            By default, Swagger-UI attempts to validate specs against swagger.io's online validator.
            You can use this parameter to set a different validator URL, for example for locally deployed validators (Validator Badge).
            Setting it to null will disable validation
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.Username">
            <summary>
            Default username for OAuth2 password flow.
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.ClientId">
            <summary>
            Default clientId
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.ClientSecret">
            <summary>
            Default clientSecret
            </summary>
            <remarks>Setting this exposes the client secrets in inline javascript in the swagger-ui generated html.</remarks>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.Realm">
            <summary>
            Realm query parameter (for oauth1) added to authorizationUrl and tokenUrl
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.AppName">
            <summary>
            Application name, displayed in authorization popup
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.ScopeSeparator">
            <summary>
            Scope separator for passing scopes, encoded before calling, default value is a space (encoded value %20)
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.Scopes">
            <summary>
            String array of initially selected oauth scopes, default is empty array
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.AdditionalQueryStringParams">
            <summary>
            Additional query parameters added to authorizationUrl and tokenUrl
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.UseBasicAuthenticationWithAccessCodeGrant">
            <summary>
            Only activated for the accessCode flow. During the authorization_code request to the tokenUrl,
            pass the Client Password using the HTTP Basic Authentication scheme
            (Authorization header with Basic base64encode(client_id + client_secret))
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.OAuthConfigObject.UsePkceWithAuthorizationCodeGrant">
            <summary>
            Only applies to authorizatonCode flows. Proof Key for Code Exchange brings enhanced security for OAuth public clients.
            The default is false
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.InterceptorFunctions.RequestInterceptorFunction">
            <summary>
            MUST be a valid Javascript function.
            Function to intercept remote definition, "Try it out", and OAuth 2.0 requests.
            Accepts one argument requestInterceptor(request) and must return the modified request, or a Promise that resolves to the modified request.
            Ex: "function (req) { req.headers['MyCustomHeader'] = 'CustomValue'; return req; }"
            </summary>
        </member>
        <member name="P:Swashbuckle.AspNetCore.SwaggerUI.InterceptorFunctions.ResponseInterceptorFunction">
            <summary>
            MUST be a valid Javascript function.
            Function to intercept remote definition, "Try it out", and OAuth 2.0 responses.
            Accepts one argument responseInterceptor(response) and must return the modified response, or a Promise that resolves to the modified response.
            Ex: "function (res) { console.log(res); return res; }"
            </summary>
        </member>
    </members>
</doc>
